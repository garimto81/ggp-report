name: Quick Test

on:
  workflow_dispatch:  # 수동 실행 전용

jobs:
  quick-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Quick Firebase test
      timeout-minutes: 3
      run: |
        echo "🚀 빠른 Firebase 연결 테스트..."
        node -e "
        const { FirebaseDataFetcher } = require('./dist/services/firebaseDataFetcher');
        (async () => {
          const startTime = Date.now();
          const fetcher = FirebaseDataFetcher.getInstance();
          const tasks = await fetcher.fetchCameraTasks();
          const duration = Date.now() - startTime;
          console.log('✅ Firebase 연결 성공');
          console.log('📊 수집된 업무: ' + tasks.length + '개');
          console.log('⏱️ 소요 시간: ' + duration + 'ms');
          
          // 간단한 통계
          const completed = tasks.filter(t => t.status === 'completed').length;
          const pending = tasks.filter(t => t.status === 'pending').length;
          console.log('📈 완료: ' + completed + '개, 대기: ' + pending + '개');
        })().catch(err => {
          console.error('❌ Firebase 연결 실패:', err.message);
          process.exit(1);
        });
        "
    
    - name: Test API keys validation
      timeout-minutes: 1
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      run: |
        echo "🔑 API 키 검증..."
        
        # Gemini API 키 체크
        if [ -z "$GEMINI_API_KEY" ] || [ "$GEMINI_API_KEY" = "your_gemini_api_key_here" ]; then
          echo "❌ GEMINI_API_KEY가 설정되지 않았거나 기본값입니다"
          exit 1
        else
          echo "✅ GEMINI_API_KEY 설정됨"
        fi
        
        # Google 서비스 계정 체크
        if [ -z "$GOOGLE_SERVICE_ACCOUNT_KEY" ] || [ "$GOOGLE_SERVICE_ACCOUNT_KEY" = "{}" ]; then
          echo "❌ GOOGLE_SERVICE_ACCOUNT_KEY가 설정되지 않았거나 빈 값입니다"
          exit 1
        else
          echo "✅ GOOGLE_SERVICE_ACCOUNT_KEY 설정됨"
          
          # JSON 유효성 검사
          echo "$GOOGLE_SERVICE_ACCOUNT_KEY" | jq -e . >/dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "✅ JSON 형식 유효"
            # client_email 필드 확인
            CLIENT_EMAIL=$(echo "$GOOGLE_SERVICE_ACCOUNT_KEY" | jq -r '.client_email // empty')
            if [ -n "$CLIENT_EMAIL" ]; then
              echo "✅ 서비스 계정 이메일: $CLIENT_EMAIL"
            else
              echo "⚠️ client_email 필드가 없습니다"
            fi
          else
            echo "❌ JSON 형식이 올바르지 않습니다"
            exit 1
          fi
        fi
    
    - name: GitHub connection test
      timeout-minutes: 1
      run: |
        echo "🐙 GitHub API 연결 테스트..."
        curl -s -f -m 10 "https://api.github.com/repos/garimto81/ggp-report" > /dev/null
        if [ $? -eq 0 ]; then
          echo "✅ ggp-report 리포지토리 접근 가능"
        else
          echo "⚠️ ggp-report 리포지토리 접근 불가 (비공개 또는 존재하지 않음)"
          echo "ℹ️ GitHub 데이터 수집은 건너뛰고 Firebase 데이터만 사용합니다"
        fi
    
    - name: Quick test summary
      if: always()
      run: |
        echo ""
        echo "🎯 빠른 테스트 완료!"
        echo "================================"
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 모든 기본 연결이 정상 작동합니다"
          echo "💡 전체 테스트를 실행하려면 'Test Run' 워크플로우를 사용하세요"
        else
          echo "❌ 일부 연결에 문제가 있습니다"
          echo "🔧 설정을 확인한 후 다시 시도하세요"
        fi
        echo "⏱️ 예상 전체 테스트 시간: 8-12분"
        echo "🚀 예상 일일 보고서 생성 시간: 5-7분"